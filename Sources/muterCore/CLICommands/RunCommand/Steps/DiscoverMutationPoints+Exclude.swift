import Foundation
import SwiftSyntax

// Currently supports only line comments (in block comments, would need to detect in which actual line the skip marker appears - and if it isn't the first or last line, it won't contain code anyway)
final class ExcludedMutationPointsDetector: SyntaxVisitor {
    private(set) var excludedUTF8Offsets: [Int] = []
    
    private let muterSkipMarker = "muter:skip"

    private func visitPrivately<SyntaxType>(_ node: SyntaxType) where SyntaxType: SyntaxProtocol {
        let markedForExclusion = node.leadingTrivia?.contains {
            if case .lineComment(let commentText) = $0 {
                return commentText.contains(muterSkipMarker)
            } else {
                return false
            }
        }
        if markedForExclusion == true {
            excludedUTF8Offsets.append(node.position.utf8Offset)
        }
    }

    override func visit(_ node: UnknownDeclSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: UnknownExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: UnknownStmtSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: UnknownTypeSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: UnknownPatternSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: CodeBlockItemSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: CodeBlockItemListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: CodeBlockSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: InOutExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: PoundColumnExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: TupleExprElementListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ArrayElementListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: DictionaryElementListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: StringLiteralSegmentsSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: TryExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: DeclNameArgumentSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: DeclNameArgumentListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: DeclNameArgumentsSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: IdentifierExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: SuperRefExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: NilLiteralExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: DiscardAssignmentExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: AssignmentExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: SequenceExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ExprListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: PoundLineExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: PoundFileExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: PoundFileIDExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: PoundFilePathExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: PoundFunctionExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: PoundDsohandleExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: SymbolicReferenceExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: PrefixOperatorExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: BinaryOperatorExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ArrowExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: FloatLiteralExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: TupleExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ArrayExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: DictionaryExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: TupleExprElementSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ArrayElementSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: DictionaryElementSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: IntegerLiteralExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: BooleanLiteralExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: TernaryExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: MemberAccessExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: IsExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: AsExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: TypeExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ClosureCaptureItemSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ClosureCaptureItemListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ClosureCaptureSignatureSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ClosureParamSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ClosureParamListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ClosureSignatureSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ClosureExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: UnresolvedPatternExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: MultipleTrailingClosureElementSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: MultipleTrailingClosureElementListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: FunctionCallExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: SubscriptExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: OptionalChainingExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ForcedValueExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: PostfixUnaryExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: SpecializeExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: StringSegmentSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ExpressionSegmentSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: StringLiteralExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: KeyPathExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: KeyPathBaseExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ObjcNamePieceSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ObjcNameSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ObjcKeyPathExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ObjcSelectorExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: EditorPlaceholderExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ObjectLiteralExprSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: TypeInitializerClauseSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: TypealiasDeclSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: AssociatedtypeDeclSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: FunctionParameterListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ParameterClauseSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ReturnClauseSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: FunctionSignatureSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: IfConfigClauseSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: IfConfigClauseListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: IfConfigDeclSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: PoundErrorDeclSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: PoundWarningDeclSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: PoundSourceLocationSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: PoundSourceLocationArgsSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: DeclModifierSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: InheritedTypeSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: InheritedTypeListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: TypeInheritanceClauseSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ClassDeclSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: StructDeclSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ProtocolDeclSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ExtensionDeclSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: MemberDeclBlockSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: MemberDeclListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: MemberDeclListItemSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: SourceFileSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: InitializerClauseSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: FunctionParameterSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ModifierListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: FunctionDeclSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: InitializerDeclSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: DeinitializerDeclSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: SubscriptDeclSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: AccessLevelModifierSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: AccessPathComponentSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: AccessPathSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ImportDeclSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: AccessorParameterSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: AccessorDeclSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: AccessorListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: AccessorBlockSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: PatternBindingSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: PatternBindingListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: VariableDeclSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: EnumCaseElementSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: EnumCaseElementListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: EnumCaseDeclSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: EnumDeclSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: OperatorDeclSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: IdentifierListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: OperatorPrecedenceAndTypesSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: PrecedenceGroupDeclSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: PrecedenceGroupAttributeListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: PrecedenceGroupRelationSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: PrecedenceGroupNameListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: PrecedenceGroupNameElementSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: PrecedenceGroupAssignmentSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: PrecedenceGroupAssociativitySyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: TokenListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: NonEmptyTokenListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: CustomAttributeSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: AttributeSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: AttributeListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: SpecializeAttributeSpecListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: LabeledSpecializeEntrySyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: NamedAttributeStringArgumentSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: DeclNameSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ImplementsAttributeArgumentsSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ObjCSelectorPieceSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ObjCSelectorSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: DifferentiableAttributeArgumentsSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: DifferentiabilityParamsClauseSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: DifferentiabilityParamsSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: DifferentiabilityParamListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: DifferentiabilityParamSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: DerivativeRegistrationAttributeArgumentsSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: QualifiedDeclNameSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: FunctionDeclNameSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ContinueStmtSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: WhileStmtSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: DeferStmtSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ExpressionStmtSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: SwitchCaseListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: RepeatWhileStmtSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: GuardStmtSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: WhereClauseSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ForInStmtSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: SwitchStmtSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: CatchClauseListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: DoStmtSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ReturnStmtSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: YieldStmtSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: YieldListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: FallthroughStmtSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: BreakStmtSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: CaseItemListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: CatchItemListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ConditionElementSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: AvailabilityConditionSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: MatchingPatternConditionSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: OptionalBindingConditionSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ConditionElementListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: DeclarationStmtSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ThrowStmtSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: IfStmtSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ElseIfContinuationSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ElseBlockSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: SwitchCaseSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: SwitchDefaultLabelSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: CaseItemSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: CatchItemSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: SwitchCaseLabelSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: CatchClauseSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: PoundAssertStmtSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: GenericWhereClauseSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: GenericRequirementListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: GenericRequirementSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: SameTypeRequirementSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: GenericParameterListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: GenericParameterSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: GenericParameterClauseSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ConformanceRequirementSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: SimpleTypeIdentifierSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: MemberTypeIdentifierSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ClassRestrictionTypeSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ArrayTypeSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: DictionaryTypeSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: MetatypeTypeSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: OptionalTypeSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: SomeTypeSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ImplicitlyUnwrappedOptionalTypeSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: CompositionTypeElementSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: CompositionTypeElementListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: CompositionTypeSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: TupleTypeElementSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: TupleTypeElementListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: TupleTypeSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: FunctionTypeSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: AttributedTypeSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: GenericArgumentListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: GenericArgumentSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: GenericArgumentClauseSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: TypeAnnotationSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: EnumCasePatternSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: IsTypePatternSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: OptionalPatternSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: IdentifierPatternSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: AsTypePatternSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: TuplePatternSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: WildcardPatternSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: TuplePatternElementSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ExpressionPatternSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: TuplePatternElementListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: ValueBindingPatternSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: AvailabilitySpecListSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: AvailabilityArgumentSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: AvailabilityLabeledArgumentSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: AvailabilityVersionRestrictionSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ node: VersionTupleSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
    override func visit(_ token: TokenSyntax) -> SyntaxVisitorContinueKind { visitPrivately(token); return super.visit(token) }
    override func visit(_ node: UnknownSyntax) -> SyntaxVisitorContinueKind { visitPrivately(node); return super.visit(node) }
}
